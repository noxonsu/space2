#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import sys
import os
import pprint

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'hababru'))

from hababru.src.backend.services.products.news_analysis import NewsAnalysisProduct
from hababru.src.backend.services.llm_service import LLMService


def main():
    print("=== –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–î–£–ö–¢–ï '–ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô' ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ LLM —Å–µ—Ä–≤–∏—Å
    mock_llm_service = type('MockLLMService', (), {
        'generate_text': lambda self, prompt: '–ú–æ–∫ –æ—Ç–≤–µ—Ç –æ—Ç LLM'
    })()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    try:
        news_product = NewsAnalysisProduct(mock_llm_service)
        print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        return
    
    # 1. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    print("1. –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   - Product ID: {news_product.product_id}")
    print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {news_product.name}")
    print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {news_product.description}")
    print()
    
    # 2. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    print("2. –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–î–£–ö–¢–ï:")
    product_info = news_product.get_product_info()
    for key, value in product_info.items():
        if isinstance(value, list):
            print(f"   - {key}:")
            for item in value:
                print(f"     ‚Ä¢ {item}")
        else:
            print(f"   - {key}: {value}")
    print()
    
    # 3. SEO –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    print("3. SEO –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:")
    keywords = news_product.get_seo_keywords()
    print(f"   –í—Å–µ–≥–æ: {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    for i, keyword in enumerate(keywords, 1):
        print(f"   {i:2d}. {keyword}")
    print()
    
    # 4. –î–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
    print("4. –î–ï–ú–û-–ö–û–ù–¢–ï–ù–¢:")
    demo_content = news_product.get_demo_content()
    for key, value in demo_content.items():
        if isinstance(value, dict):
            print(f"   - {key}:")
            for subkey, subvalue in value.items():
                if isinstance(subvalue, list):
                    print(f"     ‚Ä¢ {subkey}:")
                    for item in subvalue:
                        print(f"       - {item}")
                else:
                    print(f"     ‚Ä¢ {subkey}: {subvalue}")
        elif isinstance(value, list):
            print(f"   - {key}:")
            for item in value:
                print(f"     ‚Ä¢ {item}")
        else:
            print(f"   - {key}: {value}")
    print()
    
    # 5. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
    print("5. –ò–ù–¢–ï–†–§–ï–ô–°–´ –í–í–û–î–ê/–í–´–í–û–î–ê:")
    
    print("   –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    input_interface = news_product.get_input_interface_description()
    pprint.pprint(input_interface, width=80, indent=6)
    print()
    
    print("   –í–´–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    output_interface = news_product.get_output_interface_description()
    pprint.pprint(output_interface, width=80, indent=6)
    print()
    
    # 6. –î–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞
    print("6. –í–ù–£–¢–†–ï–ù–ù–ò–ï –î–ê–ù–ù–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤: {len(news_product.product_data.get('demo_data', {}).get('monitored_sectors', []))}")
    print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_product.product_data.get('demo_data', {}).get('news_sources', []))}")
    print(f"   - –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {len(news_product.product_data.get('demo_data', {}).get('analysis_features', []))}")
    print()
    
    # 7. –°–≤—è–∑–∞–Ω–Ω—ã–µ SEO —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("7. –°–í–Ø–ó–ê–ù–ù–´–ï SEO –°–¢–†–ê–ù–ò–¶–´:")
    seo_pages = news_product.product_data.get('seo_pages', [])
    for page in seo_pages:
        print(f"   - {page.get('path', '')}: {page.get('title', '')} ({page.get('category', '')})")
    print()
    
    # 8. –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ
    print("8. –ü–†–ò–ú–ï–† –í–´–ü–û–õ–ù–ï–ù–ò–Ø –î–ï–ú–û:")
    try:
        demo_result = news_product.execute_demo({'query': '–≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å'})
        if 'error' in demo_result:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {demo_result['error']}")
        else:
            print(f"   ‚úÖ –î–µ–º–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   - –ó–∞–ø—Ä–æ—Å: {demo_result.get('query', 'N/A')}")
            print(f"   - –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {demo_result.get('total_news', 0)}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–¥–æ–≤: {len(demo_result.get('trends', []))}")
            if demo_result.get('news_items'):
                print(f"   - –ü–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {demo_result['news_items'][0].get('title', 'N/A')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ: {e}")
    print()
    
    # 9. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("9. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    config_stats = {
        '–í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏': len(news_product.product_data.keys()),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SEO –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤': len(news_product.get_seo_keywords()),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π': len(product_info.get('target_audience', [])),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤': len(product_info.get('key_benefits', [])),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': len(product_info.get('use_cases', [])),
    }
    
    for key, value in config_stats.items():
        print(f"   - {key}: {value}")
    print()
    
    print("=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===")
    print(f"üí° –ü—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –æ–±—à–∏—Ä–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å {sum(config_stats.values())} —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    main()
