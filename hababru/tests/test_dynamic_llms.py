#!/usr/bin/env python3

import sys
import os
sys.path.append('/workspaces/space2/hababru')

from src.backend.services.telegram_product_generator import TelegramProductGenerator, TelegramMessage
from src.backend.services.llm_service import LLMService
from src.backend.services.llms_txt_service import LlmsTxtService

# –ú–æ–∫ LLM —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
class MockLLMService:
    def generate_text(self, prompt):
        return """---
product_id: "crm_automation"
name: "CRM –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
description: "–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CRM-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –ò–ò"
version: "1.0"
category: "automation"
status: "active"

demo_data:
  key_features:
    - "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"
    - "–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂"
    - "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏"
  
  supported_formats:
    - "CSV"
    - "XLSX"
    - "API"
  
  processing_time: "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
  accuracy: "95%"

product_info:
  key_benefits:
    - "–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 80%"
    - "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 25%"
    - "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
  
  target_audience:
    - "–û—Ç–¥–µ–ª—ã –ø—Ä–æ–¥–∞–∂"
    - "–ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å"
    - "E-commerce –∫–æ–º–ø–∞–Ω–∏–∏"
  
  use_cases:
    - "–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    - "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
    - "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"

seo:
  keywords:
    - "CRM –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
    - "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂"
    - "CRM —Å –ò–ò"
    - "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏"
    - "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞"
"""

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
print("=== –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–†–û–î–£–ö–¢–ê ===")
generator = TelegramProductGenerator(MockLLMService())

message = TelegramMessage(
    message_id=999,
    text="üöÄ –ù–æ–≤—ã–π CRM –ø–æ–º–æ—â–Ω–∏–∫ —Å –ò–ò! –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
    date="2025-07-03T15:00:00Z",
    media_files=["crm_demo.png"]
)

result = generator.generate_product_from_message(message)
print("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:", result)

print("\n=== –ü–†–û–í–ï–†–ö–ê LLMS.TXT –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===")
llms_service = LlmsTxtService('https://hababru.com')

print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
products = llms_service.product_loader.get_available_products()
for product_id in products:
    try:
        data = llms_service.product_loader.load_product_data(product_id)
        print(f"- {product_id}: {data.get('name', 'No name')}")
    except Exception as e:
        print(f"- {product_id}: ERROR - {e}")

print("\n=== –°–ï–ö–¶–ò–Ø –ü–†–û–î–£–ö–¢–û–í –ò–ó LLMS.TXT ===")
content = llms_service.generate_llms_txt()
lines = content.split('\n')

# –ò—â–µ–º —Å–µ–∫—Ü–∏—é "–ü—Ä–æ–¥—É–∫—Ç—ã"
in_products_section = False
for line in lines:
    if line.strip() == "## –ü—Ä–æ–¥—É–∫—Ç—ã":
        in_products_section = True
        print(line)
        continue
    elif line.startswith("## ") and in_products_section:
        break
    elif in_products_section:
        print(line)
