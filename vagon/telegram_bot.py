import os
import logging
import pandas as pd
import re
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from dotenv import load_dotenv
import requests
import io
import base64

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Flask API
# –í Codespaces –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
API_URL = "http://127.0.0.1:8080"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_query_examples():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        current_dir = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.join(current_dir, 'static', 'query_examples.json')
        
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data['examples']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return []

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
QUERY_EXAMPLES = load_query_examples()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API ---

async def call_api(endpoint, method='GET', json_data=None):
    try:
        if method == 'GET':
            response = requests.get(f"{API_URL}/{endpoint}")
        elif method == 'POST':
            response = requests.post(f"{API_URL}/{endpoint}", json=json_data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API {endpoint}: {e}"
        if e.response is not None:
            try:
                error_details = e.response.json().get('error', e.response.text)
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API {endpoint}: {error_details}"
            except ValueError:
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API {endpoint}: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON. –û—Ç–≤–µ—Ç: {e.response.text}"
        logger.error(error_message)
        raise Exception(error_message)

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏ –≤—ã–ø–æ–ª–Ω—é SQL-–∑–∞–ø—Ä–æ—Å, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ."
        "\n\n–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    if QUERY_EXAMPLES:
        examples_text = ""
        for i, example in enumerate(QUERY_EXAMPLES[:3]):
            examples_text += f"{i+1}. `{example['user_query']}`\n"
        
        await update.message.reply_text(examples_text, parse_mode='Markdown')
        
        await update.message.reply_html(
            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /examples –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        )
    else:
        await update.message.reply_html(
            "\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/examples - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/models - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏\n"
        "/set_model <model_name> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LLM –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_model Qwen/Qwen2.5-Coder-7B)\n"
        "/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "'–ü–æ–∫–∞–∂–∏ 5 —Å–∞–º—ã—Ö —Ç—è–∂–µ–ª—ã—Ö –≥—Ä—É–∑–æ–≤, –ø—Ä–∏–Ω—è—Ç—ã—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.'\n"
        "'–°–¥–µ–ª–∞–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã–≥—Ä—É–∑–∫–∏ –≤–∞–≥–æ–Ω–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.'\n"
        "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /examples –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤."
    )
    await update.message.reply_text(help_text)

async def examples_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤."""
    if not QUERY_EXAMPLES:
        await update.message.reply_text("‚ùå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
        
    examples_text = "üìù **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n\n"
    
    for i, example in enumerate(QUERY_EXAMPLES, 1):
        examples_text += f"{i}. `{example['user_query']}`\n\n"
    
    examples_text += "–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ!"
    
    await update.message.reply_text(examples_text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º."""
    try:
        stats = await call_api("api/stats")
        if stats:
            df_stats = pd.DataFrame(stats)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Telegram
            response_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:**\n\n"
            for _, row in df_stats.iterrows():
                response_text += (
                    f"**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** `{row['DATABASE_NAME']}`\n"
                    f"**–¢–∞–±–ª–∏—Ü–∞:** `{row['TABLE_NAME']}`\n"
                    f"**–ó–∞–ø–∏—Å–µ–π:** `{row['TABLE_ROWS']:,}`\n"
                    f"**–†–∞–∑–º–µ—Ä (MB):** `{row['SIZE_MB']:.2f}`\n\n"
                )
            await update.message.reply_text(response_text, parse_mode='Markdown')
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def models_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â—É—é."""
    try:
        models_info = await call_api("api/models")
        if models_info:
            available_models = models_info.get('models', [])
            current_model = models_info.get('current_model')
            
            response_text = "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏:**\n"
            for model in available_models:
                response_text += f"- `{model}`\n"
            response_text += f"\n**–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** `{current_model}`"
            
            await update.message.reply_text(response_text, parse_mode='Markdown')
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")

async def set_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç LLM –º–æ–¥–µ–ª—å."""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥–µ–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/set_model Qwen/Qwen2.5-Coder-7B`")
        return
    
    model_name = " ".join(context.args)
    try:
        result = await call_api("api/models/set", method='POST', json_data={'model_name': model_name})
        if result.get('success'):
            await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{result['current_model']}`.", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ."""
    user_query = update.message.text
    await update.message.reply_text("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    try:
        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL
        await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SQL-–∑–∞–ø—Ä–æ—Å...")
        sql_response = await call_api("api/generate-sql-with-prompt", method='POST', json_data={"query": user_query})
        sql_query = sql_response.get("sql_query")
        full_prompt = sql_response.get("full_prompt")

        if not sql_query:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.")
            return

        await update.message.reply_text(f"‚úÖ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å:**\n```sql\n{sql_query}\n```", parse_mode='Markdown')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL –∏ –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
        context.user_data['last_sql_query'] = sql_query
        context.user_data['last_full_prompt'] = full_prompt
        context.user_data['last_user_query'] = user_query

        # –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö/–≥—Ä–∞—Ñ–∏–∫–∞
        await update.message.reply_text("üìä –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∏ —Å—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫...")
        execute_response = await call_api("api/execute-sql-with-chart", method='POST', json_data={
            "query": sql_query,
            "user_query": user_query,
            "create_chart": True # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
        })
        
        data = execute_response.get("data")
        chart_base64 = execute_response.get("chart")
        chart_type = execute_response.get("chart_type")

        if data:
            df_results = pd.DataFrame(data)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
            if len(df_results) > 10:
                await update.message.reply_text(f"üìà **–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**\n```\n{df_results.head(10).to_string(index=False)}\n```", parse_mode='Markdown')
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π CSV
                csv_buffer = io.StringIO()
                df_results.to_csv(csv_buffer, index=False, encoding='utf-8')
                csv_buffer.seek(0)
                await update.message.reply_document(
                    document=csv_buffer.getvalue().encode('utf-8'),
                    filename="query_results.csv",
                    caption="–ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ CSV."
                )
            else:
                await update.message.reply_text(f"üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:**\n```\n{df_results.to_string(index=False)}\n```", parse_mode='Markdown')
            
            if chart_base64:
                try:
                    chart_bytes = base64.b64decode(chart_base64)
                    await update.message.reply_photo(
                        photo=chart_bytes,
                        caption=f"–ì—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–∞: {chart_type}"
                    )
                except Exception as chart_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {chart_e}")
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–±–∞–≥, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if 'last_full_prompt' in context.user_data:
            keyboard = [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data="show_full_prompt")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –æ—Ç–ª–∞–¥–∫–µ:", reply_markup=reply_markup)

async def show_full_prompt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    
    full_prompt = context.user_data.get('last_full_prompt', '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    user_query = context.user_data.get('last_user_query', '–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    sql_query = context.user_data.get('last_sql_query', 'SQL-–∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    response_text = (
        "--- **–î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞** ---\n\n"
        f"**–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n```\n{user_query}\n```\n\n"
        f"**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**\n```sql\n{sql_query}\n```\n\n"
        f"**–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π LLM:**\n```\n{full_prompt}\n```"
    )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram
    if len(response_text) > 4096:
        parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
        for part in parts:
            await query.message.reply_text(part, parse_mode='Markdown')
    else:
        await query.message.reply_text(response_text, parse_mode='Markdown')


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not telegram_token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        print("–û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê –≤ —Ñ–∞–π–ª .env")
        return

    application = Application.builder().token(telegram_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("examples", examples_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("models", models_command))
    application.add_handler(CommandHandler("set_model", set_model_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CallbackQueryHandler(show_full_prompt_callback, pattern="show_full_prompt"))

    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
