#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import sys
import os
import yaml
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'hababru'))

from hababru.src.backend.services.product_data_loader import ProductDataLoader


def analyze_product_forms():
    print("=== –ê–ù–ê–õ–ò–ó –§–û–†–ú –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í ===\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    data_loader = ProductDataLoader()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    try:
        available_products = data_loader.get_available_products()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(available_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
        for product in available_products:
            print(f"  - {product}")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
    form_analysis = {}
    
    for product_id in available_products:
        try:
            print(f"üì¶ –ê–ù–ê–õ–ò–ó –ü–†–û–î–£–ö–¢–ê: {product_id}")
            print("‚îÄ" * 60)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            product_data = data_loader.load_product_data(product_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            interfaces = product_data.get('interfaces', {})
            input_interface = interfaces.get('input', {})
            output_interface = interfaces.get('output', {})
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–µ
            form_info = {
                'name': product_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'category': product_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'has_input_interface': bool(input_interface),
                'has_output_interface': bool(output_interface),
                'input_fields': [],
                'required_fields': [],
                'form_complexity': '–ø—Ä–æ—Å—Ç–∞—è'
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            if input_interface:
                properties = input_interface.get('properties', {})
                required = input_interface.get('required', [])
                
                print(f"‚úÖ –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞:")
                print(f"   - –¢–∏–ø: {input_interface.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(properties)}")
                print(f"   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(required)}")
                
                if properties:
                    print(f"   - –ü–æ–ª—è:")
                    for field_name, field_config in properties.items():
                        field_type = field_config.get('type', 'unknown')
                        field_desc = field_config.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                        is_required = field_name in required
                        required_mark = " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)" if is_required else ""
                        print(f"     ‚Ä¢ {field_name}: {field_type} - {field_desc}{required_mark}")
                        
                        form_info['input_fields'].append({
                            'name': field_name,
                            'type': field_type,
                            'description': field_desc,
                            'required': is_required,
                            'example': field_config.get('example', '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞')
                        })
                        
                        if is_required:
                            form_info['required_fields'].append(field_name)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
                if len(properties) > 5:
                    form_info['form_complexity'] = '—Å–ª–æ–∂–Ω–∞—è'
                elif len(properties) > 2:
                    form_info['form_complexity'] = '—Å—Ä–µ–¥–Ω—è—è'
            else:
                print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–≤–æ–¥–∞
            if output_interface:
                output_properties = output_interface.get('properties', {})
                print(f"‚úÖ –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–≤–æ–¥–∞:")
                print(f"   - –¢–∏–ø: {output_interface.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: {len(output_properties)}")
                
                if output_properties:
                    print(f"   - –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞:")
                    for field_name, field_config in list(output_properties.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        field_type = field_config.get('type', 'unknown')
                        field_desc = field_config.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:50]
                        print(f"     ‚Ä¢ {field_name}: {field_type} - {field_desc}...")
                    if len(output_properties) > 5:
                        print(f"     ... –∏ –µ—â–µ {len(output_properties) - 5} –ø–æ–ª–µ–π")
            else:
                print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–≤–æ–¥–∞")
            
            # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            demo_data = product_data.get('demo_data', {})
            if demo_data:
                print(f"üéØ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {len(demo_data)} —Å–µ–∫—Ü–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            form_analysis[product_id] = form_info
            
            print("‚îÄ" * 60)
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            print()
    
    # –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("=" * 80)
    print("üìä –°–í–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó –§–û–†–ú")
    print("=" * 80)
    
    total_products = len(form_analysis)
    products_with_forms = sum(1 for info in form_analysis.values() if info['has_input_interface'])
    products_without_forms = total_products - products_with_forms
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}")
    print(f"–° —Ñ–æ—Ä–º–∞–º–∏ –≤–≤–æ–¥–∞: {products_with_forms}")
    print(f"–ë–µ–∑ —Ñ–æ—Ä–º –≤–≤–æ–¥–∞: {products_without_forms}")
    print()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for product_id, info in form_analysis.items():
        category = info['category']
        if category not in categories:
            categories[category] = []
        categories[category].append((product_id, info))
    
    print("üè∑Ô∏è –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, products in categories.items():
        print(f"\nüìÇ {category.upper()}:")
        for product_id, info in products:
            form_status = "‚úÖ –ï—Å—Ç—å —Ñ–æ—Ä–º–∞" if info['has_input_interface'] else "‚ùå –ù–µ—Ç —Ñ–æ—Ä–º—ã"
            complexity = info['form_complexity']
            field_count = len(info['input_fields'])
            print(f"   ‚Ä¢ {info['name']} ({product_id}): {form_status}")
            if info['has_input_interface']:
                print(f"     ‚îú‚îÄ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}")
                print(f"     ‚îú‚îÄ –ü–æ–ª–µ–π: {field_count}")
                print(f"     ‚îî‚îÄ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {len(info['required_fields'])}")
    
    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º
    print("\nüîç –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –§–û–†–ú:")
    
    form_signatures = {}
    for product_id, info in form_analysis.items():
        if info['has_input_interface']:
            # –°–æ–∑–¥–∞–µ–º "–ø–æ–¥–ø–∏—Å—å" —Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–µ–π
            field_types = sorted([f['type'] for f in info['input_fields']])
            signature = tuple(field_types)
            
            if signature not in form_signatures:
                form_signatures[signature] = []
            form_signatures[signature].append((product_id, info['name']))
    
    unique_forms = 0
    similar_forms = 0
    
    for signature, products in form_signatures.items():
        if len(products) == 1:
            unique_forms += 1
            product_id, name = products[0]
            print(f"‚ú® –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {name} ({product_id}) - –ø–æ–ª—è: {list(signature)}")
        else:
            similar_forms += len(products)
            print(f"üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ä–º—ã ({len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤) - –ø–æ–ª—è: {list(signature)}")
            for product_id, name in products:
                print(f"     ‚Ä¢ {name} ({product_id})")
    
    print(f"\n–ò—Ç–æ–≥–æ:")
    print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º: {unique_forms}")
    print(f"  - –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ñ–æ—Ä–º–∞–º–∏: {similar_forms}")
    print(f"  - –¢–∏–ø–æ–≤ —Ñ–æ—Ä–º: {len(form_signatures)}")
    
    return form_analysis


if __name__ == "__main__":
    analysis = analyze_product_forms()
